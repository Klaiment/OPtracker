services:
  tracker:
    container_name: OPtracker_tracker
    build:
      context: ./OPTracker_tracker
    volumes:
      - ./OPTracker_tracker:/app
      - type: bind
        source: ./config.ts
        target: /app/config.ts
    ports:
      - "3000:3000"
    depends_on:
      - OPTracker_database
      - redis
    networks:
      - OPNetwork

  api:
    container_name: OPtracker_API
    build:
      context: ./OPTracker_API
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - ./OPTracker_API/config:/opt/app/config
      - ./OPTracker_API/src:/opt/app/src
      - ./OPTracker_API/package.json:/opt/package.json
      - ./OPTracker_API/yarn.lock:/opt/yarn.lock
      - ./OPTracker_API/.env:/opt/app/.env
      - ./OPTracker_API/public/uploads:/opt/app/public/uploads
    ports:
      - "1337:1337"
    env_file: .env
    depends_on:
      - OPTracker_database
    networks:
      - OPNetwork

  nginx:
    image: nginx:alpine
    container_name: OPtracker_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - OPNetwork
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - tracker

  OPTracker_database:
    image: postgres:15
    container_name: OPTracker_database
    restart: always
    env_file: .env
    volumes:
      - optracker_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - OPNetwork
  redis:
    image: redis:alpine
    container_name: OPtracker_redis
    volumes:
      - redis_data:/data
    networks:
      - OPNetwork
    ports:
      - "6379:6379"
    restart: always
  client:
    container_name: OPTracker_client
    build:
      context: ./OPTracker_client
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - ./OPTracker_client:/app
      - ./config.ts:/app/config.ts
    ports:
      - "3100:3100"
    depends_on:
      - api
    networks:
      - OPNetwork
volumes:
  optracker_db_data:
  redis_data:

networks:
  OPNetwork:
    driver: bridge
